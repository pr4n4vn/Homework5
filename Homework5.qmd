---
title: "Homework5 by Pranav Nair in ST558"
format: html
editor: visual
---

## Task 1



## Task 2

```{r}
library(dplyr)
library(httr)
library(readr)
library(caret)
library(class)

#1
#First, read in the raw csv data file as an R object.
heart_data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/heart.csv", col_names = TRUE)
print(heart_data)


#Next, find any missing data
summary(heart_data)
anyNA(heart_data)

#filter out the observations that have a 0 in either cholesterol or restingBP

#Summarize the data, especially with respect to HeartDisease variable
summary(heart_data$HeartDisease)
table(heart_data$HeartDisease)


#2
#Create a new variable that is a factor version of HeartDisease variable, and remove ST_Slope variable
heart_data$HeartDisease <- as.factor(heart_data$HeartDisease)

heart_data |>
  select(-ST_Slope)
  #filter(Cholesterol != 0 & RestingBP != 0)
  
print(heart_data)

str(heart_data)

#3
#kNN model, create dummy variables for the character variables in the dataset.

heart_data$Sex <- as.factor(heart_data$Sex)
heart_data$ChestPainType <- as.factor(heart_data$ChestPainType)
heart_data$RestingECG <- as.factor(heart_data$RestingECG)
heart_data$ExerciseAngina <- as.factor(heart_data$ExerciseAngina)

print(heart_data)


dummy_vars <- dummyVars(~ Sex + ChestPainType + RestingECG + ExerciseAngina, data = heart_data)

heart_data_dum <- predict(dummy_vars, newdata = heart_data)

heart_data_dum <- as.data.frame(heart_data_dum)
heart_data <- cbind(heart_data, heart_data_dum)
print(heart_data)


```
##Split your Data

```{r}
train <- createDataPartition(heart_data$HeartDisease,p = 0.7, list = FALSE)
train_data <- heart_data[train, ]
test_data <- heart_data[-train, ]

dim(train_data)
dim(test_data)
```

##kNN Model
```{r}
#Define training control
trcrtl <- trainControl(method = "repeatedcv", 
                       number = 10,
                       repeats = 3)

library(class)

tuneGrid <- expand.grid(k = c(1:40))
knn_fit <- train(HeartDisease ~ Age + RestingBP + Cholesterol,
                 data = train_data, 
                 method = "knn",
                 trControl = trcrtl,
                 tuneGrid = tuneGrid)
print(knn_fit)

#Here, print the CV results 
print(knn_fit$results)

#Create the prediction based on the test set
knn_test <- predict(knn_fit, newdata = test_data)

#Create the confusion matrix to see how well the chosen model does on the test set.

confusionMatrix(knn_test, test_data$HeartDisease)

```

##Logistic Regression

```{r}

logistic_regression_basic <- train(HeartDisease ~ Age + RestingBP + Cholesterol,
                             data = train_data,
                             method = "glm",
                             family = binomial,
                             trControl = trcrtl)

logistic_regression_second <- train(HeartDisease ~ Age * RestingBP + Cholesterol,
                                    data = train_data,
                                    method = "glm",
                                    family = binomial,
                                    trControl = trcrtl)

logistic_regression_extended <- train(HeartDisease ~ Age + RestingBP + Cholesterol + Sex + ExerciseAngina + ChestPainType + RestingECG,
                                      data = train_data,
                                      method = "glm",
                                      family = binomial,
                                      trControl = trcrtl)

logistic_prediction_basic <- predict(logistic_regression_basic, newdata = test_data)
confusionMatrix(logistic_prediction_basic, test_data$HeartDisease)

logistic_prediction_second <- predict(logistic_regression_second, newdata = test_data)
confusionMatrix(logistic_prediction_second, test_data$HeartDisease)

logistic_regression_extended <- predict(logistic_regression_extended, newdata = test_data)
confusionMatrix(logistic_regression_extended, test_data$HeartDisease)



```

#Tree Models
```{r}
#Classification Tree
class_grid <- expand.grid(cp = seq(0, 0.1, by = 0.001))

class_tree <- train(HeartDisease ~ Age + RestingBP + Cholesterol + Sex + ExerciseAngina + ChestPainType + RestingECG,
                    data = train_data,
                    method = "rpart",
                    trControl = trcrtl,
                    tuneGrid = class_grid)

colnames(train_data)
#Random Forest
library(randomForest)

trcrtl <- trainControl(method = "repeatedcv", 
                       number = 10,
                       repeats = 3,
                       verboseIter = FALSE)
mtry_max = ncol(train_data)


random_grid <- data.frame(mtry = 1:mtry_max)
random_forest <- train(HeartDisease ~.,
                         data = train_data,
                         method = "rf",
                         trControl = trcrtl,
                         tuneGrid = random_grid)
print(random_forest)


#Boosted Tree
library(gbm)
boost_grid <- expand.grid(n.trees = c(25, 50, 100, 200),
                          interaction.depth = 1:3,
                          shrinkage = 0.1,
                          nminobsinnode = 10,
                          verbose = FALSE)

boosted_tree <- train(HeartDisease ~.,
                      data = train_data,
                      method = "gbm",
                      trControl = trcrtl,
                      tuneGrid = boost_grid)
```

